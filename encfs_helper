#! /usr/bin/env bash

usage() {
    cat >&2 <<EOF
Usage: encfs_helper {open|close|create|snap}

   create /path/to/volume /path/to/keyfile
       a keyfile '-' generates a random key, which is written to
       \$PWD/\$(basename \$volume_path)

   open /path/to/volume /path/to/keyfile [/path/to/mountpoint]
       volumes are mounted under \$XDG_RUNTIME_DIR by default

   close /path/to/mountpoint

   snap /path/to/volume
       create a snapshot of volume under /path/to/volume_snap

       recovery: unpack each incremental archive in chronological order to the
       same directory.

       verify incremental archives: b2sum -c \$snapdir/MANIFEST
       verify the manifest itself : b2sum -c \$snapdir/MANIFEST.B2SUM
EOF
    exit 1
}

#
# Run
#

set -e
umask 077

progmode=$1 ; shift || progmode='usage'

case "$progmode" in
    'open')
        volume=${1?Volume}
        keyfile=${2?Key file}
        mountpoint=${3:-${XDG_RUNTIME_DIR:-/run/user/$UID}/mnt/${volume##*/}}

        mkdir -p "$mountpoint"
        yes | encfs \
                  --extpass="gpg --batch -d $keyfile" \
                  "$volume" "$mountpoint"

        echo "$mountpoint"
        ;;

    'close')
        if mountpoint -q "$mountpoint" ; then
            fusermount -u "$mountpoint"
        fi
        ;;

    'create')
        volume=${1?Volume}
        keyfile=${2?Key file}

        [[ -e "$volume/.encfs6.xml" ]] && exit 0

        # Generate keyfile if necessary
        if [[ "$keyfile" = '-' ]] ; then
            keyfile=$PWD/${volume##*/}_key.gpg
            keytmp=$(mktemp)
            head -c512 /dev/urandom | gpg --batch -e >"$keytmp"
            if [[ -e "$keyfile" ]] ; then
                echo "$0: keyfile $keyfile exists; refusing to overwrite" >&2
                exit 1
            fi
            mv "$keytmp" "$keyfile"
        fi

        # Create new volume
        tmpmnt=$(mktemp -d)
        trap "fusermount -u $tmpmnt; rmdir $tmpmnt; rm -f $keytmp" \
             EXIT QUIT INT TERM
        yes | encfs \
                  --standard \
                  --extpass="gpg --batch -d $keyfile" \
                  "$volume" "$tmpmnt"
        gpg --batch -o "${volume}_encfs6.xml.gpg" -e "$volume/.encfs6.xml"

        # Report
        cat >"${volume}_create.log" <<EOF
volume: $volume
keyfile: $keyfile
backup: ${volume}_encfs6.xml.gpg
EOF

        echo "${volume}_create.log"
        ;;

    'snap')
        volume=${1?Volume}
        snapdir=${2:-${volume}_snaps}

        # Derived parameters
        volname=${volume##*/}
        archivefile="$snapdir/${volname}_snap.$(date +%Y-%m-%d.%s).tar"
        snarfile="$snapdir/${volname}_snap.snar"

        if [[ ! -f "$volume"/.encfs6.xml ]] ; then
            echo "$volume does not look like an encfs volume" >&2
            exit 1
        fi

        # Create new archive file
        mkdir -p "$snapdir"
        chmod 700 "$snapdir"
        (
            cd "$(dirname "$volume")"
            tar \
                --create \
                --exclude='.encfs6.xml' \
                --file="$archivefile" \
                --listed-incremental="$snarfile" \
                "${volume##*/}"
        )
        chmod -w "$archivefile"

        # Record verifcation information
        chmod +w "$snapdir"/MANIFEST{,.B2SUM} 2>/dev/null || true
        (
            cd "$snapdir"
            b2sum --tag "${archivefile##*/}" >>"$PWD"/MANIFEST
            b2sum --tag MANIFEST              >"$PWD"/MANIFEST.B2SUM
        )
        chmod -w "$snapdir"/MANIFEST{,.B2SUM}

        # Report
        echo "$archivefile"
        ;;

    *)
        usage
esac
