#! /usr/bin/env bash

usage() {
    cat >&2 <<EOF
Usage: encfs_helper {open|close|create|snap}

   create /path/to/volume /path/to/keyfile
       a keyfile '-' generates a random key, which is written to
       \$PWD/\$(basename \$volume_path)

   open /path/to/volume /path/to/keyfile [/path/to/mountpoint]
       volumes are mounted under \$XDG_RUNTIME_DIR by default

   close /path/to/mountpoint

   snap /path/to/volume
       create a snapshot of volume under /path/to/volume_snap

       recovery: unpack each incremental archive in chronological order to the
       same directory.

       verify incremental archives: b2sum -c \$snapdir/MANIFEST
       verify the manifest itself : gpg --verify \$snapdir/MANIFEST.asc \$snapdir/MANIFEST

   recover /path/to/volume_snap /path/to/volume_encfs6.xml.gpg /path/to/volume
       recreate EncFS volume from snapshots and backup EncFS configuration file
EOF
    exit 1
}

#
# Run
#

[ -n "${BASH_VERSION:-}" ] || {
    echo "This script requires Bourne-Again Shell" >&2
    exit 1
}

set -o errexit -o nounset

umask 077

PATH=/usr/bin
export PATH

LC_ALL=C
export LC_ALL

: ${XDG_RUNTIME_DIR:=/run/user/$UID}
export XDG_RUNTIME_DIR

readonly gpg2="$(command -v gpg2) -q --batch"

progmode=${1:-} ; shift || progmode='usage'

case "$progmode" in
    'open')
        volume=${1?Volume}
        keyfile=${2?Key file}
        mountpoint=${3:-$XDG_RUNTIME_DIR/mnt/${volume##*/}}

        mkdir -p "$mountpoint"
        yes | encfs \
                  --extpass="$gpg2 -d '$keyfile'" \
                  "$volume" "$mountpoint"

        echo "$mountpoint"
        ;;

    'close')
        mountpoint=${1?Mountpoint}

        mountpoint -q "$mountpoint" && fusermount -u "$mountpoint"
        ;;

    'create')
        volume=${1?Volume}
        keyfile=${2?Key file}
        tmpdir=$(mktemp -d)

        if [[ -e "$volume/.encfs6.xml" ]] ; then
            echo "$0: looks like $volume is an encfs volume; doing nothing" >&2
            exit 0
        fi

        # Generate keyfile if necessary
        #
        # A keyfile comprises a certain number of random bytes
        # and serves as the EncFS volume passphrase.  The
        # keyfile is symmetrically encrypted against a selected
        # pgp key for on-disk storage.
        if [[ "$keyfile" = '-' ]] ; then
            keyfile=$PWD/${volume##*/}_key.gpg
            keytmp=$(mktemp -p "$tmpdir")
            keylen=512
            head -c$keylen /dev/urandom | $gpg2 -e >"$keytmp"
            if [[ -e "$keyfile" ]] ; then
                echo "$0: keyfile $keyfile exists; refusing to overwrite" >&2
                exit 1
            fi
            mv "$keytmp" "$keyfile"
        fi

        # Create new volume
        tmpmnt=$(mktemp -d)
        # we want this to expand now rather than when signalled
        # shellcheck disable=SC2064
        trap "fusermount -u '$tmpmnt'; rmdir '$tmpmnt'; rm -rf '$tmpdir'" \
             EXIT QUIT INT TERM
        yes | encfs \
                  --standard \
                  --extpass="$gpg2 -d '$keyfile'" \
                  "$volume" "$tmpmnt"
        $gpg2 -o "${volume}_encfs6.xml.gpg" -e "$volume/.encfs6.xml"

        # Report
        cat >"${volume}_create.log" <<EOF
# Path to EncFS volume
volume=$volume

# The keyfile used to unlock the EncFS volume
keyfile=$keyfile

# Encrypted copy of the EncFS volume configuration
encfs6_backup=${volume}_encfs6.xml.gpg
EOF

        echo "${volume}_create.log"
        ;;

    'snap')
        # Parameters
        volume=${1?Volume}
        snapdir=${2:-${volume}_snaps}

        # Derived parameters
        volname=${volume##*/}
        archivefile=$snapdir/${volname}_snap.$(date +%Y-%m-%d.%s).tar
        snarfile=$snapdir/${volname}_snap.snar

        if [[ ! -f "$volume"/.encfs6.xml ]] ; then
            echo "$volume does not look like an encfs volume" >&2
            exit 1
        fi

        # Create new archive file
        mkdir -p "$snapdir"
        chmod 700 "$snapdir"
        if [[ -e "$snarfile" ]] && [[ ! -w "$snarfile" ]] ; then
            chmod +w "$snarfile"
        fi
        tar \
            --directory="${volume%/*}" \
            --create \
            --exclude='.encfs6.xml' \
            --file="$archivefile" \
            --listed-incremental="$snarfile" \
            "${volume##*/}"
        chmod -w "$archivefile" "$snarfile"

        # Record verifcation information
        chmod +w "$snapdir"/MANIFEST{,.B2SUM} 2>/dev/null || true
        (
            cd "$snapdir"
            b2sum --tag "${archivefile##*/}" >>"$PWD"/MANIFEST
            b2sum --tag MANIFEST              >"$PWD"/MANIFEST.B2SUM
            if [[ -f MANIFEST.asc ]] ; then
                mv MANIFEST.asc{,.1}
            fi
            $gpg2 -bs --armor MANIFEST
            rm -f MANIFEST.asc.1
        )
        chmod -w "$snapdir"/MANIFEST{,.B2SUM,.asc}

        # Report
        echo "$archivefile"
        ;;

    'recover')
        snapdir=${1?Snapshot directory}
        encfsbakfile=${2?EncFS configuration file backup}
        volume=${3?Volume directory}

        if [[ ! -d "$snapdir" ]] ; then
            echo "no such directory: '$snapdir'" >&2
            exit 2
        fi
        if [[ ! -f "$encfsbakfile" ]] ; then
            echo "no such file: '$encfsbakfile'" >&2
            exit 2
        fi
        if [[ -e "$volume" ]] ; then
            echo "volume path '$volume' exists; refusing to overwrite" >&2
            exit 2
        fi

        mkdir -p "$volume"
        find "$snapdir" -type f -name '*.tar' -print0 | while IFS= read -r -d $'\0' snap ; do
            tar xf "$snap" -C "${volume%/*}"
        done
        $gpg2 -d "$encfsbakfile" >"$volume"/.encfs6.xml
        ;;
    *)
        usage
esac
